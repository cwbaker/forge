
buildfile 'forge/forge.forge';
buildfile 'forge_hooks/forge_hooks.forge';
buildfile 'forge_lua/forge_lua.forge';
buildfile 'forge_test/forge_test.forge';

-- Disable warnings on Linux to avoid unused variable warnings in Boost
-- System library headers.
local warning_level = 3;
if operating_system() == 'linux' then
    warning_level = 0;
end

for _, cc in toolsets('cc.*') do
    local cc = cc:inherit {
        warning_level = warning_level;
    };
    cc:StaticLibrary '${lib}/forge_${architecture}' {
        '${lib}/assert_${architecture}';
        '${lib}/boost_filesystem_${architecture}';
        '${lib}/boost_system_${architecture}';
        '${lib}/error_${architecture}';
        '${lib}/forge_lua_${architecture}';
        '${lib}/liblua_${platform}_${architecture}';
        '${lib}/luaxx_${architecture}';
        '${lib}/process_${architecture}';

        cc:Cxx '${obj}/%1' {
            defines = {
                'BOOST_ALL_NO_LIB'; -- Disable automatic linking to Boost libraries.
                '_CRT_SECURE_NO_DEPRECATE'; -- Disable CRT security warnings
                '_SCL_SECURE_NO_DEPRECATE'; -- Disable SCL security warnings
                '_WIN32_WINNT=0x0a00'; -- Target Windows 10
                'WIN32_LEAN_AND_MEAN'; -- Include minimal declarations from Windows headers
            };

            'Arguments.cpp',
            'Context.cpp',
            'Executor.cpp',
            'Filter.cpp',
            'Forge.cpp',
            'ForgeEventSink.cpp',
            'Graph.cpp',
            'GraphReader.cpp',
            'GraphWriter.cpp',
            'Job.cpp',
            'Reader.cpp', 
            'Rule.cpp',
            'Scheduler.cpp', 
            'System.cpp',
            'Target.cpp',
            'Toolset.cpp',
            'path_functions.cpp'
        };
    };
end
