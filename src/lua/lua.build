
for _, build in build:default_builds("cc_.*") do
    local build = build:configure {
        warning_level = 0;
    };

    build:Library '${lib}/liblua_${architecture}' {
        build:Cc () {
            defines = build:switch { 
                build:operating_system();
                linux = { "LUA_USE_POSIX", "LUA_USE_DLOPEN" };
                macos = { "LUA_USE_POSIX", "LUA_USE_DLOPEN" };
                windows = { "_CRT_SECURE_NO_DEPRECATE" };
            };
            "lapi.c",
            "lauxlib.c",
            "lbaselib.c",
            "lbitlib.c",
            "lcode.c",
            "lcorolib.c",
            "lctype.c",
            "ldblib.c",
            "ldebug.c",
            "ldo.c",
            "ldump.c",
            "lfunc.c",
            "lgc.c",
            "linit.c",
            "liolib.c",
            "llex.c",
            "lmathlib.c",
            "lmem.c",
            "loadlib.c",
            "lobject.c",
            "lopcodes.c",
            "loslib.c",
            "lparser.c",
            "lstate.c",
            "lstring.c",
            "lstrlib.c",
            "ltable.c",
            "ltablib.c",
            "ltm.c",
            "lundump.c",
            "lutf8lib.c",
            "lvm.c",
            "lzio.c"
        };
    };
end

if build:platform_matches("macos") or build:platform_matches("windows") then
    for _, build in build:default_builds(("cc_%s_.*"):format(platform)) do
        local build = build:configure {
            warning_level = 0;
        };
        local architecture = build.settings.architecture;
        build:all {
            build:Executable '${bin}/luac_${architecture}' {
                '${lib}/assert_${architecture}';
                '${lib}/liblua_${architecture}';
                build:Cc () {
                    defines = { "_CRT_SECURE_NO_DEPRECATE" };
                    "luac.c"
                };
            };        
        };
    end

    local build = build:configure {
        warning_level = 0;
    };
    build:all {
        build:Executable "${bin}/lua" {
            '${lib}/assert_${architecture}';
            '${lib}/liblua_${architecture}';
            build:Cc () {
                defines = { "_CRT_SECURE_NO_DEPRECATE" };
                "lua.c"
            };
        };
    };
end
